From 695f9352d8d1157c7fd8fd6e4b39a9a55a3ebaec Mon Sep 17 00:00:00 2001
From: vatsa287 <i.mnshreevatsa@gmail.com>
Date: Tue, 2 Jun 2020 20:45:23 +0530
Subject: [PATCH] Create Patch File

---
 src/App.tsx   | 28 ++++++++++++------
 src/graph.tsx | 78 +++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 98 insertions(+), 8 deletions(-)
 create mode 100644 src/graph.tsx

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..d67d6a1 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph:false,
     };
   }
 
@@ -29,19 +31,29 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
+    if(this.state.showGraph){
     return (<Graph data={this.state.data}/>)
   }
-
+  }
   /**
    * Get new data from server and update the state with the new data
    */
-  getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
-  }
+    getDataFromServer() {
+
+    let x = 0;
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        this.setState({
+          data: serverResponds,
+          showGraph: true,
+        });
+      });
+      x++;
+      if (x > 1000) {
+        clearInterval(interval);
+      }
+    }, 100);
+   }
 
   /**
    * Render the App react component
diff --git a/src/graph.tsx b/src/graph.tsx
new file mode 100644
index 0000000..df2e739
--- /dev/null
+++ b/src/graph.tsx
@@ -0,0 +1,78 @@
+import React, { Component } from 'react';
+import { Table } from '@jpmorganchase/perspective';
+import { ServerRespond } from './DataStreamer';
+import './Graph.css';
+
+/**
+ * Props declaration for <Graph />
+ */
+interface IProps {
+  data: ServerRespond[],
+}
+
+/**
+ * Perspective library adds load to HTMLElement prototype.
+ * This interface acts as a wrapper for Typescript compiler.
+ */
+interface PerspectiveViewerElement extends HTMLElement  {
+  load: (table: Table) => void,
+}
+
+/**
+ * React component that renders Perspective based on data
+ * parsed from its parent through data property.
+ */
+class Graph extends Component<IProps, {}> {
+  // Perspective table
+  table: Table | undefined;
+
+  render() {
+    return React.createElement('perspective-viewer');
+  }
+
+  componentDidMount() {
+    console.log('rendering');
+    // Get element to attach the table from the DOM.
+    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+
+    const schema = {
+      stock: 'string',
+      top_ask_price: 'float',
+      top_bid_price: 'float',
+      timestamp: 'date',
+    };
+
+    if (window.perspective) {
+      this.table = window.perspective.worker().table(schema);
+    }
+    if (this.table) {
+      // Load the `table` in the `<perspective-viewer>` DOM reference.
+         console.log('change table');
+      // Add more Perspective configurations here.
+      elem.load(this.table);
+      elem.setAttribute('view', 'y_line');
+      elem.setAttribute('column-pivots', '["stock"]');
+      elem.setAttribute('row-pivots', '["timestamp"]');
+      elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('aggregates', '{"stock":"distinct count","top_ask_price":"avg","top_bid_price":"avg","timestamp":"distinct count"}');
+
+    }
+  }
+
+  componentDidUpdate() {
+    // Everytime the data props is updated, insert the data into Perspective table
+    if (this.table) {
+      // As part of the task, you need to fix the way we update the data props to
+      // avoid inserting duplicated entries into Perspective table again.
+      this.table.update(this.props.data.map((el: any) => {
+        // Format the data from ServerRespond to the schema
+        return {
+          stock: el.stock,
+          top_ask_price: el.top_ask && el.top_ask.price || 0,
+          top_bid_price: el.top_bid && el.top_bid.price || 0,
+          timestamp: el.timestamp,
+        };
+      }));
+    }
+  }
+}
-- 
2.17.1

